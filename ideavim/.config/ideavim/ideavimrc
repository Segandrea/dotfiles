"""""""""""
" OPTIONS "
"""""""""""
set ideajoin " Smart join, useful to join a lot of things
set idearefactormode=keep
set ignorecase
set smartcase
set hlsearch
set incsearch
set number
set relativenumber
set noshowmode
set clipboard+=ideaput
set matchpairs+=<:>

let mapleader=" "

"""""""""""""""
"   PLUGINS   "
"""""""""""""""

" Which-key (requires to install the plugin)
set notimeout
source ~/.config/ideavim/which-key.vim
" TODO: move which-key.vim content into this file

" Quickscope shows unique characters when using f, F, t, T
set quickscope
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" NERDTree
Plug 'preservim/nerdtree'
let g:NERDTreeMapActivateNode='l'
let g:NERDTreeMapJumpRoot='h'
" 'q' to quit tree
" 'enter' to open file

" Highlighted Yank
Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration=700
let g:highlightedyank_highlight_color="rgba(98, 114, 164, 100)"

" Vim-Surround
Plug 'tpope/vim-surround'
let g:WhichKeyDesc_ys = "ys"
let g:WhichKeyDesc_cs = "cs"
let g:WhichKeyDesc_ds = "ds"

""""""""""""
" MAPPINGS "
""""""""""""

" Decide if vim or ide should be to handle a keystroke
" Syntax: `sethandler keys mode-list:handler ...`
" mode-list can be one or more of the following:
"   - a: all modes
"   - i: insert mode
"   - n: normal mode
"   - x: visual mode
"   - v: visual and select modes
" handler can be: `ide` or `vim`
" Example: `sethandler <C-a> i-v:vim n:ide`

sethandler <C-a> n-v-x:vim i:ide
sethandler <C-x> n-v-x:vim i:ide
sethandler <C-v> n:vim i:ide

" Vim Basic Mappings
" highlight wrappers
nnoremap <silent> n :set<space>hlsearch<CR>nzzzv
nnoremap <silent> N :set<space>hlsearch<CR>Nzzzv
nnoremap <silent> / :set<space>hlsearch<CR>/
nnoremap <silent> ? :set<space>hlsearch<CR>?
nnoremap <silent> * :set<space>hlsearch<CR>*
nnoremap <silent> # :set<space>hlsearch<CR>#
nnoremap <Esc> :set<space>nohlsearch<CR><Esc>
nnoremap i :set<space>nohlsearch<CR>zzi
nnoremap I :set<space>nohlsearch<CR>zzI
nnoremap a :set<space>nohlsearch<CR>zza
nnoremap A :set<space>nohlsearch<CR>zzA
" break the line coherently with J
nnoremap K a<CR><Esc>k$
" increment/decrement and keep selected
vnoremap g<C-a> g<C-a>gv
vnoremap g<C-x> g<C-x>gv
vnoremap <C-a> <C-a>gv
vnoremap <C-x> <C-x>gv
" go to the end of pasted text
nnoremap p p`]
nnoremap P P`]
" keep position after yank in visual mode
vnoremap y ygv<Esc>
" undo the Undone
nnoremap U <C-r>
" keep clipboard clean
nnoremap c "_c
nnoremap C "_C
nnoremap x "_x
nnoremap X "_X
nnoremap s "_s
vnoremap x "_x
vnoremap X "_X
vnoremap s "_s
" yank as it should be
nnoremap Y y$
" shifting as it should be
vnoremap > >gv
vnoremap < <gv
nnoremap > >>
nnoremap < <<
" ~ with movements
nnoremap ~ g~
" go to start/end of line
nnoremap H ^
nnoremap L $
onoremap H ^
vnoremap H ^
vnoremap L $

" TODO: many keybindings should be changed
" TODO: add mappings to edit in a new floating window (EditSourceInNewWindow)
" and also to navigate them (NextWindow)
" and also to close a window/split (CloseContent/CloseAllEditors)
" TODO: read more about the `sethandler` command

" Toggle folding
nmap za <Action>(ExpandCollapseToggleAction)

" Vim-Surround mapping to add surrounders
" NB. ds default to delete and cs default to change
nmap S ys

" Splits and navigation
" handlers
sethandler <M-v> a:vim
sethandler <M-o> a:vim
sethandler <M-h> a:vim
sethandler <M-j> a:vim
sethandler <M-k> a:vim
sethandler <M-l> a:vim
" mappings
nmap <M-v> <Action>(SplitVertically)
nmap <M-o> <Action>(SplitHorizontally)
nmap <M-q> <Action>(Unsplit)
vmap <M-v> <Action>(SplitVertically)
vmap <M-o> <Action>(SplitHorizontally)
vmap <M-q> <Action>(Unsplit)
imap <M-v> <Action>(SplitVertically)
imap <M-o> <Action>(SplitHorizontally)
imap <M-q> <Action>(Unsplit)
nnoremap <M-h> <C-w>h
nnoremap <M-j> <C-w>j
nnoremap <M-k> <C-w>k
nnoremap <M-l> <C-w>l
inoremap <M-h> <C-w>h
inoremap <M-j> <C-w>j
inoremap <M-k> <C-w>k
inoremap <M-l> <C-w>l
vnoremap <M-h> <C-w>h
vnoremap <M-j> <C-w>j
vnoremap <M-k> <C-w>k
vnoremap <M-l> <C-w>l

" TODO: remove me
nmap <leader>foo <Action>(IdeaVim.ReloadVimRc.reload)

" Goto mappings
let g:WhichKeyDesc_goto                = "g [g]oto"
let g:WhichKeyDesc_gotoDeclaration     = "gd [d]eclaration"
nmap gd <Action>(GotoDeclaration)
let g:WhichKeyDesc_gotoImplementation  = "gi [i]mplementation"
nmap gi <Action>(GotoImplementation)
let g:WhichKeyDesc_gotoSuper           = "gs [s]uper method"
nmap gs <Action>(GotoSuperMethod)
let g:WhichKeyDesc_gotoTest            = "gT [T]est"
nmap gT <Action>(GotoTest)
let g:WhichKeyDesc_gotoTypeDeclaration = "gt [t]ype Declaration"
nmap gt <Action>(GotoTypeDeclaration)
" goto next
let g:WhichKeyDesc_gotoNext            = "gn [n]ext"
let g:WhichKeyDesc_gotoNextMethod      = "gnm [m]ethod"
nmap gnm <Action>(MethodDown)
let g:WhichKeyDesc_windowNextTab       = "gnt [t]ab"
nmap gnt <Action>(NextTab)
let g:WhichKeyDesc_gotoNextErr         = "gne [d]iagnostic"
nmap gnd <Action>(GotoNextError)
let g:WhichKeyDesc_gotoNextSearchSel   = "gne searched and [s]elect"
noremap gns gn
" goto prev
let g:WhichKeyDesc_gotoPrev            = "gn [p]revious"
let g:WhichKeyDesc_gotoPrevMethod      = "gpm [m]ethod"
nmap gpm <Action>(MethodUp)
let g:WhichKeyDesc_gotoPrevErr         = "gpe [d]iagnostic"
nmap gpd <Action>(GotoPreviousError)
let g:WhichKeyDesc_windowPrevTab       = "gpt [t]ab"
nmap gpt <Action>(PreviousTab)
let g:WhichKeyDesc_gotoPrevSearchSel   = "gne searched and [s]elect"
nmap gps gN


" Window and tags navigation
let g:WhichKeyDesc_window             = "<Space>w Window"
" windows are lateral panels
let g:WhichKeyDesc_hideActiveWindow   = "<Space>wa Toggle Active Window"
nmap <leader>wa <Action>(HideActiveWindow)
let g:WhichKeyDesc_showBookmarksTool  = "<Space>wb Show Bookmarks List"
nmap <leader>wb <Action>(ActivateBookmarksToolWindow)
let g:WhichKeyDesc_showCommitTool     = "<Space>wc Show Commit Tool"
nmap <leader>wc <Action>(ActivateCommitToolWindow)
let g:WhichKeyDesc_showDebugTool      = "<Space>wd Show Debug Console"
nmap <leader>wd <Action>(ActivateDebugToolWindow)
let g:WhichKeyDesc_findTool           = "<Space>wf Show Find Tool"
nmap <leader>wf <Action>(ActivateFindToolWindow)
let g:WhichKeyDesc_showGradleTool     = "<Space>wg Show Gradle Tool"
nmap <leader>wg <Action>(ActivateGradleToolWindow)
let g:WhichKeyDesc_hideAllWindows     = "<Space>wh Toggle All Windows"
nmap <leader>wh <Action>(HideAllWindows)
let g:WhichKeyDesc_showNotification   = "<Space>wn Show Notifications List"
nmap <leader>wn <Action>(ActivateNotificationsToolWindow)
let g:WhichKeyDesc_showProblemsTool   = "<Space>wp Show Problems List"
nmap <leader>wp <Action>(ActivateProblemsViewToolWindow)
let g:WhichKeyDesc_showRunningTool    = "<Space>wr Show Run Console"
nmap <leader>wr <Action>(ActivateRunToolWindow)
let g:WhichKeyDesc_showServicesTool   = "<Space>wS Show Services Tool"
nmap <leader>wS <Action>(ActivateServicesToolWindow)
let g:WhichKeyDesc_showTaskTool       = "<Space>wt Show Task Tool"
nmap <leader>wt <Action>(ActivateTaskToolWindow)
let g:WhichKeyDesc_openTerminal       = "<Space>wT Open Terminal"
nmap <leader>wT <Action>(ActivateTerminalToolWindow)
let g:WhichKeyDesc_showVersionControl = "<Space>wv Show Versioning Tool"
nmap <leader>wv <Action>(ActivateVersionControlToolWindow)
let g:WhichKeyDesc_zen                = "<Space>wz Toggle [z]en Mode"
nmap <leader>wz <Action>(ToggleZenMode)


" File management
let g:WhichKeyDesc_file             = "<Space>f File"
let g:WhichKeyDesc_fileOpen         = "<Space>fo Open"
nmap <leader>fo <Action>(OpenFile)
let g:WhichKeyDesc_fileRecent       = "<Space>fr Recent Files"
nmap <leader>fr <Action>(RecentFiles)
let g:WhichKeyDesc_fileCloseEditor  = "<Space>fc Close File"
nmap <leader>fc <Action>(CloseEditor)
let g:WhichKeyDesc_fileCloseProject = "<Space>fC Close Project"
nmap <leader>fC <Action>(CloseProject)
let g:WhichKeyDesc_fileSettings     = "<Space>fs Settings"
nmap <leader>fs <Action>(ShowSettings)
" New things
let g:WhichKeyDesc_fileNew          = "<Space>fn New"
let g:WhichKeyDesc_fileNewClass     = "<Space>fnc New Class"
nmap <leader>fnc <Action>(NewClass)
let g:WhichKeyDesc_fileNewPackage   = "<Space>fnp New Package"
nmap <leader>fnp <Action>(NewDir)
" NERDTree mappings
let g:WhichKeyDesc_treeFocus        = "<Space>ft Focus tree"
nnoremap <leader>ft :NERDTreeFocus<CR>
nmap <leader>sp <Action>(ShowPopupMenu)


" Debug
let g:WhichKeyDesc_debug                        = "<Space>d Debug"
let g:WhichKeyDesc_debugBreakpoint              = "<Space>db Toggle Breakpoint"
nmap <leader>db <Action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_codeChooseDebugConfiguration = "<Space>dC Choose configuration"
nmap <leader>dC <Action>(ChooseDebugConfiguration)
let g:WhichKeyDesc_debugStart                   = "<Space>dd Start Debugging"
nmap <leader>dd <Action>(Debug)
let g:WhichKeyDesc_debugEnd                     = "<Space>dD End Debugging"
nmap <leader>dD <Action>(Stop)
" Step
let g:WhichKeyDesc_debugStep                    = "<Space>ds Step"
let g:WhichKeyDesc_debugStepOver                = "<Space>dso Over"
nmap <leader>dso <Action>(StepOver)
let g:WhichKeyDesc_debugStepOut                 = "<Space>dsO Out"
nmap <leader>dsO <Action>(StepOut)
let g:WhichKeyDesc_debugStepInto                = "<Space>dsi Into"
nmap <leader>dsi <Action>(StepIn)


" Code
let g:WhichKeyDesc_code                       = "<Space>c Code"
let g:WhichKeyDesc_codeBuild                  = "<Space>cb Build"
nmap <leader>cb <Action>(CompileDirty)
let g:WhichKeyDesc_codeCleanup                = "<Space>cc Code Cleanup"
nmap <leader>cc <Action>(CodeCleanup)
let g:WhichKeyDesc_codeChooseRunConfiguration = "<Space>cC Choose Configuration"
nmap <leader>cC <Action>(ChooseRunConfiguration)
let g:WhichKeyDesc_codeShowDocumentation      = "<Space>cd Show Quick Doc"
nmap <leader>cd <Action>(QuickJavaDoc)
let g:WhichKeyDesc_codeShowErrorDescription   = "<Space>ce Error Description"
nmap <leader>ce <Action>(ShowErrorDescription)
let g:WhichKeyDesc_codeFindUsages             = "<Space>cf Find Usage"
nmap <leader>cf <Action>(FindUsages)
let g:WhichKeyDesc_codeFormat                 = "<Space>cF Format"
nmap <leader>cF <Action>(ReformatCode)
let g:WhichKeyDesc_codeGenerate               = "<Space>cg Generate"
nmap <leader>cg <Action>(Generate)
let g:WhichKeyDesc_codeImplement              = "<Space>ci Implement Methods"
nmap <leader>ci <Action>(ImplementMethods)
let g:WhichKeyDesc_codeShowIntentionActions   = "<Space>ca Actions"
nmap <leader>ca <Action>(ShowIntentionActions)
let g:WhichKeyDesc_codeOverride               = "<Space>co Override Methods"
nmap <leader>co <Action>(OverrideMethods)
let g:WhichKeyDesc_codeOptimizeImports        = "<Space>cO Optimize Imports"
nmap <leader>cO <Action>(OptimizeImports)
let g:WhichKeyDesc_codeStart                  = "<Space>cr Start"
nmap <leader>cr <Action>(Run)
let g:WhichKeyDesc_codeStop                   = "<Space>cR Stop"
nmap <leader>cR <Action>(Stop)
let g:WhichKeyDesc_codeTest                   = "<Space>ct Test"
map <leader>ct <Action>(RunTests)


" Comments
let g:WhichKeyDesc_comment          = "<Space>/ Comment"
let g:WhichKeyDesc_commentByLine    = "<Space>// Line"
nmap <leader>// <Action>(CommentByLineComment)
let g:WhichKeyDesc_commentByComment = "<Space>/b Block"
nmap <leader>/b <Action>(CommentByBlockComment)
vmap <leader>/b <Action>(CommentByBlockComment)


" Refactor
let g:WhichKeyDesc_refactor              = "<Space>r Refactor"
let g:WhichKeyDesc_refactorDelete        = "<Space>rd Safe Delete"
nmap <leader>rd <Action>(SafeDelete)
let g:WhichKeyDesc_refactorRenameElement = "<Space>re Rename Element"
nmap <leader>re <Action>(RenameElement)
let g:WhichKeyDesc_refactorRenameFile    = "<Space>rf Rename File"
nmap <leader>rf <Action>(RenameFile)
let g:WhichKeyDesc_refactorMoveClass     = "<Space>rm Move Class"
nmap <leader>rm <Action>(Move)
let g:WhichKeyDesc_refactorList          = "<Space>rt Quick Refactor List"
nmap <leader>rt <Action>(Refactorings.QuickListPopupAction)
